#include "imports/stdlib.fc";

;;(int) parse_msg(slice in_msg_body) method_id {
;;    var (query_id, signature, ref_cell) = (
;;        in_msg_body~load_uint(64),
;;        in_msg_body~load_bits(512),
;;        in_msg_body~load_ref()
;;    );
;;    var r = ref_cell.begin_parse();
;;    var (locked_for, new_seqno) = (r~load_uint(32), r~load_uint(32));
;;}

{- storage$_ public_key:uint256 execution_time:uint32 receiver:MsgAddressInt seqno:uint32 = Storage; -}
(int, int, slice, int) load_data() impure inline_ref {
    var ds = get_data().begin_parse();
    return (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
}

() save_data(int public_key, int execution_time, slice receiver, int seqno) impure inline_ref {
    set_data(
        begin_cell()
            .store_uint(public_key, 256)
            .store_uint(execution_time, 32)
            .store_slice(receiver)
            .store_uint(seqno, 32)
            .end_cell()
    );
}

(int) handler(slice in_msg_body) impure inline_ref {
    int op = 0;
    if (slice_bits(in_msg_body) >= 32) {
        op = in_msg_body~load_uint(32);
    }

    {- storage$_ public_key:uint256 execution_time:uint32 receiver:MsgAddressInt seqno:uint32 = Storage; -}
    var (public_key, execution_time, receiver, seqno) = load_data();

    {- will process -}
    if (op == 0x9df10277) {
        {- msg body -}
        {- update#9df10277 query_id:uint64 signature:bits512 ^[ locked_for:uint32 new_seqno:uint32 ] = ExtInMsgBody -}
        var (query_id, signature, ref_cell) = (
            in_msg_body~load_uint(64),
            in_msg_body~load_bits(512),
            in_msg_body~load_ref()
        );
        var r = ref_cell.begin_parse();
        var (locked_for, new_seqno) = (r~load_uint(32), r~load_uint(32));

;;        ~dump(new_seqno);
        {- 1. If new_seqno != seqno + 1, error 119 must be thrown. This is a check for the fact that this is a new transaction (and not an old one that was sent again). -}
        if (new_seqno != (seqno + 1)) {
            return (119);
        }

        {- If the signature does not match, you should throw error 120. This is a check on the admin. -}

        save_data(public_key, execution_time, receiver, seqno + 1);

        return 0;
    }

    {- send to recipient -}
    if (op == 0xbb4be234) {
        return 121;
    }

    return 0;
}

() recv_internal(slice in_msg) {

}

() recv_external(slice in_msg) impure {
    int handled = handler(in_msg);

    if (handled) {
        throw(handled);
    } else {
        accept_message();
    }

    ;;    if(op == 0xbb4be234) {
    ;;        var ds = get_data().begin_parse();
    ;;        var (_,execution_time,receiver,_) =
    ;;        (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
    ;;
    ;;        throw_unless(124, execution_time > now());
    ;;        accept_message();
    ;;
    ;;        cell msg = begin_cell()
    ;;            .store_uint(0x18, 6) ;; or 0x10 for non-bounce
    ;;            .store_slice(reciever)
    ;;            .store_grams(my_balance)
    ;;            .end_cell();
    ;;        send_raw_message(msg, 128);
    ;;    }
}

(slice) get_receiver() impure method_id {
    var (_, _, receiver, _) = load_data();
    return receiver;
}

(int) get_seqno() impure method_id {
    var (_, _, _, seqno) = load_data();
    return seqno;
}
