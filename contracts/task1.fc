#include "imports/stdlib.fc";

;;(int) parse_msg(slice in_msg_body) method_id {
;;    var (query_id, signature, ref_cell) = (
;;        in_msg_body~load_uint(64),
;;        in_msg_body~load_bits(512),
;;        in_msg_body~load_ref()
;;    );
;;    var r = ref_cell.begin_parse();
;;    var (locked_for, new_seqno) = (r~load_uint(32), r~load_uint(32));
;;}

{- storage$_ public_key:uint256 execution_time:uint32 receiver:MsgAddressInt seqno:uint32 = Storage; -}
(int, int, slice, int) load_data() impure inline_ref {
    var ds = get_data().begin_parse();
    return (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
}

() save_data(int public_key, int execution_time, slice receiver, int seqno) impure inline_ref {
    set_data(
        begin_cell()
            .store_uint(public_key, 256)
            .store_uint(execution_time, 32)
            .store_slice(receiver)
            .store_uint(seqno, 32)
            .end_cell()
    );
}

(int) handler(slice in_msg_body) impure inline_ref {
    int op = 0;
    if (slice_bits(in_msg_body) >= 32) {
        op = in_msg_body~load_uint(32);
    }

    {- storage$_ public_key:uint256 execution_time:uint32 receiver:MsgAddressInt seqno:uint32 = Storage; -}
    var (public_key, execution_time, receiver, seqno) = load_data();

    {- will process -}
    if (op == 0x9df10277) {
        {- msg body -}
        {- update#9df10277 query_id:uint64 signature:bits512 ^[ locked_for:uint32 new_seqno:uint32 ] = ExtInMsgBody -}
        var (query_id, signature, ref_cell) = (
            in_msg_body~load_uint(64),
            in_msg_body~load_bits(512),
            in_msg_body~load_ref()
        );

        var r = ref_cell.begin_parse();
        var (locked_for, new_seqno) = (r~load_uint(32), r~load_uint(32));

        {- 1. If new_seqno != seqno + 1, error 119 must be thrown. This is a check for the fact that this is a new transaction (and not an old one that was sent again). -}
        if (new_seqno != (seqno + 1)) {
            return 119;
        }

        {- 2. If the signature does not match, you should throw error 120. This is a check on the admin. -}
        if (check_signature(ref_cell.cell_hash(), signature, public_key) == 0) {
            return 120;
        }

        {- 3. If locked_for <= 0, then error 121 must be thrown. locked_for must be strictly positive. -}
        if (locked_for <= 0) {
            return 121;
        }

        {- 4. If execution_time < now(), you should throw error 122. Checking that execution_time has not passed yet. -}
        if (execution_time < now()) {
            return 122;
        }

        {- 5. If now + locked_for < execution_time, throw error 123. Checking that the deferral of the will is strictly greater than the value by which it has already been deferred. -}
        if (now() + locked_for < execution_time) {
            return 123;
        }

        accept_message();

        save_data(public_key, now() + locked_for, receiver, seqno + 1);

        return 0;
    }

    {- send to recipient -}
    if (op == 0xbb4be234) {
        {-1. If execution_time has not occurred, error 124 should be thrown. -}
        if (execution_time < now()) {
            return 124;
        }

        accept_message();

        send_raw_message(
            begin_cell()
                    .store_uint(1, 2)
                    .store_slice(receiver)
                    .store_coins(0)
                    .end_cell(),
            128
        );

        return 0;
    }

    return 0;
}

() recv_internal(slice in_msg) {
    int handled = handler(in_msg);

    if (handled) {
        throw(handled);
    }
}

() recv_external(slice in_msg) impure {
    int handled = handler(in_msg);

    if (handled) {
        throw(handled);
    }
}

(int) get_execution_time() impure method_id {
    var (_, execution_time, _, _) = load_data();
    return execution_time;
}

(slice) get_receiver() impure method_id {
    var (_, _, receiver, _) = load_data();
    return receiver;
}

(int) get_seqno() impure method_id {
    var (_, _, _, seqno) = load_data();
    return seqno;
}

(int) get_hash() impure method_id {
    return begin_cell()
    .store_uint(60, 32)
    .store_uint(1, 32)
    .end_cell().cell_hash();
}
